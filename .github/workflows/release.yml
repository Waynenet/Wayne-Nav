name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 获取上一个 tag（如果没有也不报错）
      - name: Get previous tag
        id: previous_tag
        run: |
          if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
            echo "previous_tag=$(git describe --tags --abbrev=0 HEAD^)" >> $GITHUB_OUTPUT
          else
            echo "previous_tag=" >> $GITHUB_OUTPUT
          fi

      # 生成分组 changelog
      - name: Generate grouped changelog
        id: changelog
        env:
          PREVIOUS_TAG: ${{ steps.previous_tag.outputs.previous_tag }}
        run: |
          # 获取当前版本
          VERSION=${GITHUB_REF##*/}

          # 获取当前日期
          DATE=$(date '+%Y-%m-%d')

          # 获取提交日志
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s (%h)")
          else
            COMMITS=$(git log --pretty=format:"%s (%h)" "$PREVIOUS_TAG"..HEAD)
          fi
      
          if [ -z "$COMMITS" ]; then
            echo "没有新提交，跳过 changelog 生成。"
            exit 0
          fi
      
          # 定义提交类型和标题
          declare -A TYPE_TITLE=(
            [feat]="### 🚀 新增功能"
            [fix]="### 🐞 Bug修复"
            [docs]="### 📝 文档变更"
            [perf]="### ⚙ 性能优化"
            [chore]="### ✨ 杂项变动"
            [refactor]="### 🦄 代码重构"
            [style]="### 🌈 格式变动"
            [build]="### 🛠️ 依赖变更"
            [ci]="### 🔧 CI变更"
          )
      
          # 初始化 changelog 内容
          CHANGELOG_CONTENT="# 📜 更新日志\n\n"
          CHANGELOG_CONTENT+="## $VERSION ($DATE)\n\n"
      
          # 按类型分组
          for type in "${!TYPE_TITLE[@]}"; do
            COMMITS_BY_TYPE=$(echo "$COMMITS" | grep -i "^[^a-zA-Z0-9]*$type:")
      
            if [ -n "$COMMITS_BY_TYPE" ]; then
              CHANGELOG_CONTENT+="${TYPE_TITLE[$type]}\n"
              CHANGELOG_CONTENT+="$(echo "$COMMITS_BY_TYPE" | sed -E "s/^[^a-zA-Z0-9]*$type:[[:space:]]*/- /i")\n\n"
            fi
          done
      
          # 处理未分类提交
          OTHER_COMMITS=$(echo "$COMMITS" | grep -viE '^[^a-zA-Z0-9]*(feat|fix|docs|perf|chore|refactor|style|build|ci):')
      
          if [ -n "$OTHER_COMMITS" ]; then
            CHANGELOG_CONTENT+="### 🎨 其他修改\n"
            CHANGELOG_CONTENT+="$(echo "$OTHER_COMMITS" | sed 's/^/- /')\n\n"
          fi
      
          # 输出到环境变量
          {
            echo "CHANGELOG<<EOF"
            printf '%b\n' "$CHANGELOG_CONTENT"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ env.CHANGELOG }}
          make_latest: true