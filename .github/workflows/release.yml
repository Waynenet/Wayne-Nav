name: Release

on:
  push:
    branches:
      - master

jobs:
  check_and_release:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码并拉取所有标签
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: 获取最新提交信息
        id: last_commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "commit_message=$(echo "$COMMIT_MESSAGE" | sed 's/"/\\"/g')" >> $GITHUB_OUTPUT

      - name: 检查是否为发布提交并提取版本号
        id: version_check
        run: |
          COMMIT_MESSAGE="${{ steps.last_commit.outputs.commit_message }}"
          if [[ "$COMMIT_MESSAGE" =~ [Rr]elease[[:space:]]+v([0-9]+\.[0-9]+\.[0-9]+([-.][0-9A-Za-z-]+)*) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            TAG_NAME="v$VERSION"
            echo "Found release commit. Version: $VERSION, Tag: $TAG_NAME"
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          else
            echo "Not a release commit. Skipping release process."
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: 如果不是发布提交，则停止工作流
        if: steps.version_check.outputs.is_release == 'false'
        run: |
          echo "当前提交不符合发布条件，工作流终止。"
          exit 0

      - name: 获取上一个Tag
        id: previous_tag
        if: steps.version_check.outputs.is_release == 'true'
        run: |
          ALL_TAGS=$(git tag --sort=creatordate)
          
          # 如果 ALL_TAGS 为空，表示没有历史标签
          if [ -z "$ALL_TAGS" ]; then
            echo "previous_tag=" >> $GITHUB_OUTPUT
            echo "没有找到任何历史标签。"
          else
            # 获取 ALL_TAGS 列表中的最后一个标签作为上一个标签
            PREV_TAG=$(echo "$ALL_TAGS" | tail -n 1)
            echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT
            echo "找到上一个标签: $PREV_TAG"
          fi
        shell: bash

      - name: 创建新的Tag
        id: create_tag
        if: steps.version_check.outputs.is_release == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const tag_name = process.env.TAG_NAME;
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag_name}`,
                sha: context.sha
              });
              console.log(`Tag ${tag_name} created successfully.`);
            } catch (error) {
              if (error.status === 422 && error.message.includes('Reference already exists')) {
                console.log(`Tag ${tag_name} already exists, skipping creation.`);
              } else {
                throw error;
              }
            }
        env:
          TAG_NAME: ${{ steps.version_check.outputs.tag_name }}

      - name: 生成分组更新日志
        id: changelog
        if: steps.version_check.outputs.is_release == 'true'
        env:
          PREVIOUS_TAG: ${{ steps.previous_tag.outputs.previous_tag }}
          CURRENT_TAG_FOR_CHANGELOG: ${{ steps.version_check.outputs.tag_name }}
        run: |
          set -e
          
          CURRENT_TAG=${{ env.CURRENT_TAG_FOR_CHANGELOG }}
          DATE=$(date '+%Y-%m-%d')
          
          CHANGELOG="## 📜 更新日志 $CURRENT_TAG ($DATE)\n\n"
          
          COMMIT_RANGE=""
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "首次发布，包含所有提交"
            COMMIT_RANGE="HEAD"
          else
            echo "比较范围: $PREVIOUS_TAG..HEAD"
            COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
          fi
          
          # 先获取原始提交列表（不包含合并提交）
          RAW_COMMITS=$(git log --pretty=format:"%s (%h)" $COMMIT_RANGE --no-merges || echo "")
          
          # 然后使用 grep -v 过滤掉 release 提交
          COMMITS=$(echo "$RAW_COMMITS" | grep -viE "release[[:space:]]+v" || echo "")
          
          if [ -z "$COMMITS" ]; then
            CHANGELOG+="### 🎯 无显著变更\n\n"
          else
            declare -A TYPE_MAP=(
              [feat]="🚀 新功能"
              [fix]="🐞 Bug修复"
              [docs]="📝 文档更新"
              [perf]="⚡ 性能优化"
              [refactor]="🛠️ 代码重构"
              [style]="🎨 代码样式"
              [test]="🧪 测试相关"
              [chore]="🧹 日常维护"
              [build]="📦 构建系统"
              [ci]="🔧 CI配置"
            )
            
            # 先收集所有已分类的提交hash
            CLASSIFIED_HASHES=""
            for TYPE in "${!TYPE_MAP[@]}"; do
              FILTERED=$(echo "$COMMITS" | grep -iE "^$TYPE[:\(]|^[^a-zA-Z0-9]*$TYPE:" || true)
              if [ -n "$FILTERED" ]; then
                # 提取hash部分(括号内的内容)
                HASHES=$(echo "$FILTERED" | sed -nE 's/.*\(([^)]*)\).*/\1/p')
                CLASSIFIED_HASHES+="$HASHES"$'\n'
                
                CHANGELOG+="### ${TYPE_MAP[$TYPE]}\n"
                CHANGELOG+=$(echo "$FILTERED" | sed -E "s/^[^a-zA-Z0-9]*$TYPE[: ][[:space:]]*/- /i")
                CHANGELOG+="\n\n"
              fi
            done
            
            # 筛选真正未分类的提交(既不在已分类hash中，也不符合任何类型格式)
            OTHERS=$(echo "$COMMITS" | while read -r line; do
              HASH=$(echo "$line" | sed -nE 's/.*\(([^)]*)\).*/\1/p')
              if ! echo "$CLASSIFIED_HASHES" | grep -q "$HASH" && \
                 ! echo "$line" | grep -qiE "^($(IFS='|'; echo "${!TYPE_MAP[*]}"))[:\(]"; then
                echo "$line"
              fi
            done)
            
            if [ -n "$OTHERS" ]; then
              CHANGELOG+="### 🎭 其他变更\n"
              CHANGELOG+=$(echo "$OTHERS" | sed 's/^/- /')
              CHANGELOG+="\n\n"
            fi
          fi
          
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "CHANGELOG<<$EOF" >> $GITHUB_ENV
          echo -e "$CHANGELOG" >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV

      - name: 创建GitHub发布
        uses: softprops/action-gh-release@v2
        if: steps.version_check.outputs.is_release == 'true'
        with:
          tag_name: ${{ steps.version_check.outputs.tag_name }}
          name: Release ${{ steps.version_check.outputs.tag_name }}
          body: ${{ env.CHANGELOG }}
          make_latest: true