name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 获取上一个tag
        id: previous_tag
        run: |
          # 获取所有tag并按时间排序(从旧到新)
          ALL_TAGS=$(git tag --sort=creatordate)
          
          # 如果没有tag或只有一个tag则设为空
          if [ $(echo "$ALL_TAGS" | wc -l) -le 1 ]; then
            echo "previous_tag=" >> $GITHUB_OUTPUT
          else
            # 获取当前正在创建的tag
            CURRENT_TAG=${GITHUB_REF##*/}
            
            # 找出当前tag在列表中的位置
            TAG_LIST=($ALL_TAGS)
            for i in "${!TAG_LIST[@]}"; do
              if [[ "${TAG_LIST[$i]}" == "$CURRENT_TAG" ]]; then
                # 如果是第一个tag则没有上一个tag
                if [ $i -eq 0 ]; then
                  echo "previous_tag=" >> $GITHUB_OUTPUT
                else
                  # 否则取前一个tag
                  PREV_TAG="${TAG_LIST[$i-1]}"
                  echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT
                fi
                break
              fi
            done
          fi

      - name: 生成分组更新日志
        id: changelog
        env:
          PREVIOUS_TAG: ${{ steps.previous_tag.outputs.previous_tag }}
        run: |
          set -e
          
          CURRENT_TAG=${GITHUB_REF##*/}
          DATE=$(date '+%Y-%m-%d')
          
          CHANGELOG="# 📜 更新日志\n\n"
          CHANGELOG+="## $CURRENT_TAG ($DATE)\n\n"
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "首次发布，包含所有提交"
            COMMITS=$(git log --pretty=format:"%s (%h)")
          else
            echo "比较范围: $PREVIOUS_TAG..HEAD"
            COMMITS=$(git log --pretty=format:"%s (%h)" "$PREVIOUS_TAG..HEAD" || echo "")
          fi
          
          if [ -z "$COMMITS" ]; then
            CHANGELOG+="### 🎯 无显著变更\n\n"
          else
            declare -A TYPE_MAP=(
              [feat]="🚀 新功能"
              [fix]="🐞 Bug修复"
              [docs]="📝 文档更新"
              [perf]="⚡ 性能优化"
              [refactor]="🛠️ 代码重构"
              [style]="🎨 代码样式"
              [test]="🧪 测试相关"
              [chore]="🧹 日常维护"
              [build]="📦 构建系统"
              [ci]="🔧 CI配置"
            )
            
            # 先收集所有已分类的提交hash
            CLASSIFIED_HASHES=""
            for TYPE in "${!TYPE_MAP[@]}"; do
              FILTERED=$(echo "$COMMITS" | grep -iE "^$TYPE[:\(]|^[^a-zA-Z0-9]*$TYPE:" || true)
              if [ -n "$FILTERED" ]; then
                # 提取hash部分(括号内的内容)
                HASHES=$(echo "$FILTERED" | sed -nE 's/.*\(([^)]*)\).*/\1/p')
                CLASSIFIED_HASHES+="$HASHES"$'\n'
                
                CHANGELOG+="### ${TYPE_MAP[$TYPE]}\n"
                CHANGELOG+=$(echo "$FILTERED" | sed -E "s/^[^a-zA-Z0-9]*$TYPE[: ][[:space:]]*/- /i")
                CHANGELOG+="\n\n"
              fi
            done
            
            # 筛选真正未分类的提交(既不在已分类hash中，也不符合任何类型格式)
            OTHERS=$(echo "$COMMITS" | while read -r line; do
              HASH=$(echo "$line" | sed -nE 's/.*\(([^)]*)\).*/\1/p')
              if ! echo "$CLASSIFIED_HASHES" | grep -q "$HASH" && \
                 ! echo "$line" | grep -qiE "^($(IFS='|'; echo "${!TYPE_MAP[*]}"))[:\(]"; then
                echo "$line"
              fi
            done)
            
            if [ -n "$OTHERS" ]; then
              CHANGELOG+="### 🎭 其他变更\n"
              CHANGELOG+=$(echo "$OTHERS" | sed 's/^/- /')
              CHANGELOG+="\n\n"
            fi
          fi
          
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "CHANGELOG<<$EOF" >> $GITHUB_ENV
          echo -e "$CHANGELOG" >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV

      - name: 创建GitHub发布
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: 发布 ${{ github.ref_name }}
          body: ${{ env.CHANGELOG }}
          make_latest: true